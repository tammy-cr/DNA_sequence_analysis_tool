# -*- coding: utf-8 -*-
"""updated_cgp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S_kXSW1wIA6vssKPy0NOerU9BRLgT_-n
"""

# Purpose: Functionalize the previous code and test new programs using functions


def read_fasta (filename):  #read file
  headers = []
  sequence_list = [] #store into variables and initiate the varuiable

  try:
    with open(filename, 'r') as file:
      current_sequence = ""

      for line in file:
        line=line.strip()

        if search (r"^>", line): #need to define what's header and whats not. match a line that starts with >
              headers.append(line)
              if current_sequence:
                 sequence_list.append(current_sequence)
              current_sequence = ""
        else:
          current_sequence += line #add the right hand operand to the left

      if current_sequence:
        sequence_list.append(current_sequence) #append method append an elemtn to the end of the list


  except FileNotFoundError:
    print (f"The file does not exist")

  return headers, sequence_list


#write a function that calculates the arrays within the fucntion
def stat_fasta(filename, headers, sequence_list):
    output_file = filename.replace(".fsa", ".ot") #string manipulation to construct the name of the output file

  #statistics report
    try:
        with open(output_file, 'w') as out_file: #Initialize everything
            total_length = 0
            acounts = []
            ccounts = []
            gcounts = []
            tcounts = []
            cgcounts = []

            for i, seq in enumerate(sequence_list): #enumerate here iterates over a sequence
                header = headers[i]
                seq_length = len(seq)
                total_length += seq_length

                # Calculate nucleotide counts. Same as lab 1
                a_count = seq.upper().count("A")
                c_count = seq.upper().count("C")
                g_count = seq.upper().count("G")
                t_count = seq.upper().count("T")
                cg_count = seq.upper().count("CG")

                # Calculate nucleotide proportions
                a_prop = a_count / seq_length
                c_prop = c_count / seq_length
                g_prop = g_count / seq_length
                t_prop = t_count / seq_length
                cg_prop = cg_count / (seq_length - 1) if seq_length > 1 else 0

                acounts.append(a_count)
                ccounts.append(c_count)
                gcounts.append(g_count)
                tcounts.append(t_count)
                cgcounts.append(cg_count)

               #write report
                out_file.write(f"Sequence {i + 1}:\n")
                out_file.write(f"Header Line: {header}\n")
                out_file.write(f"Length of Sequence: {seq_length}\n")
                out_file.write(f"Nucleotide Counts (A, C, G, T, CG): {a_count}, {c_count}, {g_count}, {t_count}, {cg_count}\n")
                out_file.write(f"Nucleotide Proportions (A, C, G, T, CG): {a_prop:.2f}, {c_prop:.2f}, {g_prop:.2f}, {t_prop:.2f}, {cg_prop:.2f}\n\n") #adapted from codeacademy.com| f here is for floating point

            # Write report for the entire set of sequences
            avg_length = total_length / len(sequence_list)
            out_file.write("Summary Report:\n")
            out_file.write(f"Number of Sequences: {len(sequence_list)}\n")
            out_file.write(f"Total Length of All Sequences: {total_length}\n")
            out_file.write(f"Average Length of Sequences: {avg_length:.2f}\n")

    except FileNotFoundError:
        print(f"Could not write to the output file '{output_file}'.")

#the main body should: prompt the user for the name of the file, call read_fasta rfom step 1, call stat_fasta which will write the output file

user_filename = input("Enter the FASTA file name? ")


headers,sequence_list = read_fasta (user_filename) #calling the function 1
if headers and sequence_list:
  stat_fasta(user_filename, headers,sequence_list) #calling fucntion 2
  print(f"Report written to {user_filename.replace('.fsa', '.ot')}")